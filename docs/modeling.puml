@startuml
skinparam style strictuml

' ================= DOMAIN =================
package "domain.character" {
    abstract class Entity {
        -name : String
        -hitPoints : int
        -attackPower : int
        -defense : int
        -dexterity : int
        -speed : int
        +performAttack(target : Entity) : int
        +receiveDamage(rawDamage : int)
        +isAlive() : boolean
    }

    class Hero
    class Monster
    Entity <|-- Hero
    Entity <|-- Monster

    Hero <|-- Warrior
    Hero <|-- Mage
    Hero <|-- Archer
    Hero <|-- Rogue
    Monster <|-- Goblin
    Monster <|-- Orc
    Monster <|-- Dragon
}

package domain {
    enum AttackResult {
        MISSED
        HIT
        CRITICAL_HIT
    }
}

package domain.logs {
    class BattleLog {
        -entries : List<BattleLogEntry>
        +BattleLog(entries : List<BattleLogEntry>)
        +addEntry(entry : BattleLogEntry)
        +getEntries() : List<BattleLogEntry>
        +print()
    }

    class BattleLogEntry {
        -attackerName     : String
        -targetName       : String
        -roundNumber      : int
        -turnOrderIndex   : int
        -rawDamage        : int
        -effectiveDamage  : int
        -targetHpBefore   : int
        -targetHpAfter    : int
        -result           : AttackResult
        -killingBlow      : boolean
        -timestamp        : Instant
        +of(...) : BattleLogEntry
        +toHumanReadable() : String
        +toCsvRow() : String
        +csvHeader() : String
    }
}

package domain.battle {
    class TurnEngine {
        +playRound(heroes : List<Entity>, monsters : List<Entity>) : List<BattleLogEntry>
    }
}

package domain.game {
    enum Difficulty {
        EASY
        MEDIUM
        HARD
        --
        -statMultiplier  : double
        -monstersPerHero : int
        +applyScaling(monster : Monster) : Monster
        +monstersPerHero() : int
        +pickableTypes() : MonsterType[]
    }

    class GameState {
        -heroes       : List<Hero>
        -monsters     : List<Monster>
        -difficulty   : Difficulty
        -roundNumber  : int
        +getHeroes() : List<Hero>
        +getMonsters() : List<Monster>
        +getDifficulty() : Difficulty
        +getRoundNumber() : int
        +battleOngoing() : boolean
        +nextRound(updatedHeroes : List<Hero>, updatedMonsters : List<Monster>) : GameState
    }
}

' =============== APPLICATION ==============
package application.ports.input {
    interface GameInputPort {
        +startGame(heroCount : int, difficulty : Difficulty)
        +playRound()
        +endGame()
        +getGameState() : GameState
        +getBattleLogs() : List<BattleLogEntry>
        +getLastRoundLogs() : List<BattleLogEntry>
    }
}

package application.ports.output {
    interface LogPersistancePort {
        +saveBattleEntries(log : List<BattleLogEntry>)
        +saveBattleEntry(log : BattleLogEntry)
        +getAllBattleLogs() : List<BattleLogEntry>
    }
}

package application.service {
    class GameService {
        -logPersistance : LogPersistancePort
        -turnEngine     : TurnEngine
        -state          : GameState
        -lastRoundLogs  : List<BattleLogEntry>
        +startGame(heroCount : int, difficulty : Difficulty)
        +playRound()
        +endGame()
        +getGameState() : GameState
        +getBattleLogs() : List<BattleLogEntry>
        +getLastRoundLogs() : List<BattleLogEntry>
    }
    GameInputPort <|.. GameService
    GameService ..> LogPersistancePort
}

' ================ ADAPTERS ================
package adapter.cli {
    class CliGameAdapter {
        -gameService : GameService
        +run()
        +printState()
        +printLogs(logs : List<BattleLogEntry>)
    }
    CliGameAdapter ..> GameInputPort
}

package adapter.persistence {
    class InMemoryLogAdapter {
        -store : List<BattleLogEntry>
        +saveBattleEntries(log : List<BattleLogEntry>)
        +saveBattleEntry(log : BattleLogEntry)
        +getAllBattleLogs() : List<BattleLogEntry>
    }
    InMemoryLogAdapter ..|> LogPersistancePort
}
@enduml
